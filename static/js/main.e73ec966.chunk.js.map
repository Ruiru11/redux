{"version":3,"sources":["logo.svg","components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","PostItems","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","Postform","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPosts","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","rootReducer","applyMiddleware","thunk","App","es","className","components_Postform","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e73ec966.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postActions';\n\n\nclass Posts extends Component {\n    componentWillMount(){\n        this.props.fetchPosts(); \n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.newPost){\n            this.props.posts.unshift(nextProps.newPost);\n        }\n    }\n  render() {\n    const PostItems = this.props.posts.map(post => (\n        <div key={post.id}>\n            <h3>{post.title}</h3>\n            <p>{post.body}</p>\n        </div>\n    ));\n    return (\n      <div>\n        <h1>Posts</h1>\n        { PostItems}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n    posts:state.posts.items,\n    newPost:state.posts.item\n});\n\nPosts.propTypes = {\n    fetchPosts:propTypes.func.isRequired,\n    posts: propTypes.array.isRequired\n}\n\nexport default connect(mapStateToProps,{fetchPosts})(Posts); ","import { FETCH_POSTS , NEW_POSTS} from './types';\n\nexport const fetchPosts = () => dispatch =>{\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(\n            res => res.json())\n            .then(posts => dispatch({\n                type: FETCH_POSTS,\n                payload:posts\n            }));\n\n    \n}\n\nexport const createPosts = postData => dispatch =>{\n    fetch('https://jsonplaceholder.typicode.com/posts',{\n            method:'Post',\n           headers:{\"content-type\":\"application/json\"},\n           body:JSON.stringify(postData)\n        }).then(res => res.json())\n           .then(post => dispatch({\n            type: NEW_POSTS,\n            payload:post\n        }));\n}","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POSTS = 'NEW_POSTS';"," import React, { Component } from 'react'\n import { connect } from 'react-redux';\n import propTypes from 'prop-types';\n import { createPosts } from '../actions/postActions';\n \n \n class Postform extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            title:\"\",\n            body:\"\"\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange (e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit (e) {\n        e.preventDefault();\n        const post = {\n            title: this.state.title,\n            body:this.state.body\n        };\n        this.props.createPosts(post)\n    }\n   render() {\n     return (\n       <div>\n         <h1>Add posts</h1>\n         <form onSubmit={this.onSubmit}>\n             <div>\n                 <label>\n                     Title:\n                 </label><br/>\n                 <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title}>\n                 </input>\n             </div>\n             <br></br>\n             <div>\n                 <label>\n                     Body:\n                 </label><br/>\n                 <textarea name=\"body\" onChange={this.onChange } value={this.state.body} />\n             </div>\n             <br/>\n             <button type=\"submit\">Submit</button>\n         </form>\n       </div>\n     )\n   }\n }\n \n Postform.propTypes={\n     createPosts: propTypes.func.isRequired\n }\n \n export default connect(null, {createPosts})(Postform);","import { FETCH_POSTS , NEW_POSTS} from '../actions/types';\n\n\nconst initialState = {\n    items:[],\n    item: {}\n}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case FETCH_POSTS:\n        return {\n            ...state,\n            items: action.payload\n        }\n        case NEW_POSTS:\n        return {\n            ...state,\n            item: action.payload\n        }\n\n        default:\n        return state;\n    }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer'\n\n\nexport default combineReducers({\n    posts: postReducer\n})","import { createStore , applyMiddleware,compose} from 'redux'\nimport * as thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\n\nconst InitialState = {};\n\n\n\nconst store = createStore(rootReducer, InitialState, applyMiddleware(thunk.default));\n\n\nexport default store;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Posts from './components/Posts';\nimport PostForm from './components/Postform';\n\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={ store }>\n        <div className=\"App\">\n          <PostForm />\n          <hr/> \n          <Posts />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}